name: CMake Qt Cross-Platform Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        qt_version: ['6.5.3']
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt_version }}
        host: ${{ matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'windows-latest' && 'windows' || 'mac' }}
        target: desktop
        modules: 'qtnetworkauth qtmultimedia'
        cache: true

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgl1-mesa-dev libxcb-xinerama0-dev libfontconfig1-dev libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync1 libxcb-render-util0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-render0-dev libxcb-util1 fuse
        
    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }}

    - name: Configure CMake (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
              -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
              -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Package Windows Application with Qt DLLs
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        mkdir deploy
        copy "${{ steps.strings.outputs.build-output-dir }}\Release\CyberScanner.exe" deploy\
        windeployqt.exe --release --no-translations --no-system-d3d-compiler --no-opengl-sw deploy\CyberScanner.exe

    - name: Package macOS Application (Portable)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        mkdir -p deploy
        
        # Find and copy the executable/app bundle
        if [ -f "${{ steps.strings.outputs.build-output-dir }}/CyberScanner.app/Contents/MacOS/CyberScanner" ]; then
          echo "Found app bundle"
          cp -r "${{ steps.strings.outputs.build-output-dir }}/CyberScanner.app" deploy/
          APP_PATH="deploy/CyberScanner.app"
        elif [ -f "${{ steps.strings.outputs.build-output-dir }}/CyberScanner" ]; then
          echo "Found standalone executable, creating app bundle"
          mkdir -p deploy/CyberScanner.app/Contents/MacOS
          cp "${{ steps.strings.outputs.build-output-dir }}/CyberScanner" deploy/CyberScanner.app/Contents/MacOS/
          APP_PATH="deploy/CyberScanner.app"
          
          # Create minimal Info.plist
          cat > deploy/CyberScanner.app/Contents/Info.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>CyberScanner</string>
            <key>CFBundleIdentifier</key>
            <string>com.cybernilsen.cyberscanner</string>
            <key>CFBundleName</key>
            <string>CyberScanner</string>
            <key>CFBundleVersion</key>
            <string>1.0</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
        </dict>
        </plist>
        EOF
        else
          echo "CyberScanner executable not found"
          ls -la "${{ steps.strings.outputs.build-output-dir }}/"
          exit 1
        fi
        
        # Use macdeployqt to bundle Qt frameworks
        echo "Running macdeployqt..."
        macdeployqt "$APP_PATH" -verbose=2
        
        # Make executable
        chmod +x "$APP_PATH/Contents/MacOS/CyberScanner"

    - name: Package Linux Application (AppImage)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        mkdir -p deploy
        
        # Find the executable
        if [ -f "${{ steps.strings.outputs.build-output-dir }}/cyberscanner" ]; then
          EXEC_PATH="${{ steps.strings.outputs.build-output-dir }}/cyberscanner"
        elif [ -f "${{ steps.strings.outputs.build-output-dir }}/CyberScanner" ]; then
          EXEC_PATH="${{ steps.strings.outputs.build-output-dir }}/CyberScanner"
        elif [ -f "${{ steps.strings.outputs.build-output-dir }}/Release/CyberScanner" ]; then
          EXEC_PATH="${{ steps.strings.outputs.build-output-dir }}/Release/CyberScanner"
        else
          echo "CyberScanner executable not found"
          ls -la "${{ steps.strings.outputs.build-output-dir }}/"
          exit 1
        fi
        
        # Create AppDir structure
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/lib
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        
        # Copy executable
        cp "$EXEC_PATH" AppDir/usr/bin/CyberScanner
        chmod +x AppDir/usr/bin/CyberScanner
        
        # Create desktop file
        cat > AppDir/usr/share/applications/cyberscanner.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=CyberScanner
        Exec=CyberScanner
        Icon=cyberscanner
        Categories=Network;Security;
        Comment=TCP Port Scanner
        Terminal=false
        EOF
        
        # Create a simple icon (you should replace this with your actual icon)
        convert -size 256x256 xc:blue AppDir/usr/share/icons/hicolor/256x256/apps/cyberscanner.png 2>/dev/null || echo "Warning: ImageMagick not available, using placeholder icon"
        
        # Copy icon to AppDir root (required by AppImage)
        cp AppDir/usr/share/icons/hicolor/256x256/apps/cyberscanner.png AppDir/cyberscanner.png 2>/dev/null || touch AppDir/cyberscanner.png
        cp AppDir/usr/share/applications/cyberscanner.desktop AppDir/cyberscanner.desktop
        
        # Download and use linuxdeploy for dependency bundling
        wget -c "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
        wget -c "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"
        chmod +x linuxdeploy*.AppImage
        
        # Bundle Qt dependencies and create AppImage
        export QMAKE=$Qt6_DIR/bin/qmake
        ./linuxdeploy-x86_64.AppImage --appdir AppDir --plugin qt --output appimage
        
        # Move the created AppImage to deploy folder
        mv CyberScanner*.AppImage deploy/CyberScanner-Linux-x86_64.AppImage
        chmod +x deploy/CyberScanner-Linux-x86_64.AppImage

    - name: Test (if tests exist)
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: |
        if [ -f "CTestTestfile.cmake" ]; then
          ctest --build-config ${{ matrix.build_type }} --output-on-failure
        else
          echo "No tests found, skipping test step"
        fi

    - name: Upload Windows Artifacts
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: CyberScanner-Windows-Portable
        path: deploy/

    - name: Upload macOS Artifacts
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v4
      with:
        name: CyberScanner-macOS-Portable
        path: deploy/

    - name: Upload Linux Artifacts
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: CyberScanner-Linux-AppImage
        path: deploy/
